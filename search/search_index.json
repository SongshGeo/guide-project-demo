{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"HOME","text":"<p>Info</p> <p>This documentation depends on Mkdocs with the Material theme.</p> <p>Repo Author: SongshGeo</p>"},{"location":"#why","title":"Why?","text":"<p>Collaboration requires a clean codebase. After learning the tools and styles in this repo, I believe you will have a better Python <sup>1</sup> workflow.</p>"},{"location":"#how-to-start","title":"How to start","text":"<ol> <li>\ud83d\ude4c From Quick Start, you can learn how to use this demo repo.</li> <li>\ud83e\uddd1\u200d\ud83d\udcbb Finally, check API document, make sure you are satisfied with the fixed repo.</li> </ol> <ol> <li> <p>Guido Van Rossum and Fred L Drake Jr. Python reference manual. Centrum voor Wiskunde en Informatica Amsterdam, 1995.\u00a0\u21a9</p> </li> </ol>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#quick-start","title":"Quick Start","text":""},{"location":"quick_start/#step1-setup","title":"Step1: Setup","text":"<p>After clone this repo to local, setup:</p> <pre><code>make setup\n</code></pre> <p>There are some connivent shortcut commands in the makefile so that you can run some common commands in your terminal quickly. For example, try:</p> <pre><code>make test\n</code></pre> <p>That will test the codes in your repo. All the tests should pass.</p>"},{"location":"quick_start/#step2-write-your-test","title":"Step2: Write your test","text":"<p>Then, run the following command lines:</p> <pre><code>poetry run python src/doc_me.py\n</code></pre> <p>It should automatically calculate the areas of a circle and a rectangle.</p> <p>The first challenge is to write document for this script. Simultaneously, you should write your own test function for it in <code>tests/write_test.py</code>. You should use <code>pytest</code> framework to do so. When you finished, run <code>make test</code> again, it should still pass if everything goes well.</p> <p>Switch <code>check_mode</code> from <code>False</code> to <code>True</code> on the config file <code>config/test.yaml</code>. Then, test your repo again. If the docs you wrote earlier was robust and good enough, more tests should be passed.</p> <p>If not all the tests passed, you can check the report by run:</p> <pre><code>make report\n</code></pre> <p>It will redirect you to a web page with a allure-pytest report. You can check what happened in log like this:</p> <p></p>"},{"location":"quick_start/#step3-format-codes","title":"Step3: format codes","text":"<p>If you've passed all the test in the previous step, we will dive into deeper. Again, in the <code>config/test.yaml</code>, set <code>check_all</code> to <code>True</code> and run the codebase again. You will find most of tests cannot pass. Modify your codes format, can you pass the tests?</p>"},{"location":"quick_start/#even-more","title":"Even more","text":"<p>Finally, write some demo documents in <code>docs</code> folder, run <code>mkdocs serve</code> and inspect your documents under <code>API</code> section. Are you satisfied with your docs? Feel free to modify your docs for a better interpretation for your users.</p> <p>Install <code>pre-commit</code> and try to use it before push your code to the remote branch (the two commands in the same, and the first one is more general):</p> <pre><code>poetry run pre-commit install\nmake install-pre-commit\n</code></pre> <p>Then, before commit your changes of codebase, try to run <code>poetry run pre-commit</code>, your codebase can be uploaded only if everything goes well.</p>"},{"location":"api/","title":"API References","text":"Source code in <code>src/doc_me.py</code> <pre><code>class Rectangle:\n    def __init__(self, width: Number, height: Number) -&gt; None:\n        self.width = width\n        self.height = height\n\n    def area(self) -&gt; Number:\n        return self.width * self.height\n</code></pre> Source code in <code>src/bad_format.py</code> <pre><code>class Point:\n def __init__(self,x: int,y: int):\n  self.x=x\n  self.y=y\n def distance_from_origin(self) -&gt; str:\n  return math.sqrt(self.x**2+self.y**2)\n</code></pre>"}]}